name: "Build Docker Image and Push to GHCR, Docker Hub, or AWS ECR"
author: "@GlueOps"
description: "Abstracts defining actions to push Docker images to desired registry, defaults to ghcr.io"
branding:
  icon: 'box'
  color: 'yellow'

inputs:
  dockerfile:
    description: 'The Dockerfile filename'
    required: false
    default: 'Dockerfile'
  registry:
    description: 'The container registry to push the image to'
    required: true
    default: "ghcr.io"
  registry-username:
    description: 'The username for authentication to the container registry (defaults to the github.actor)'
    required: true
    default: ${{ github.actor }}
  image_name:
    description: 'Docker image is named after repository'
    required: true
    default: ${{ github.repository }}
  context:
    description: "A path to the context in which the build will happen"
    required: false
    default: "."
  target_directory:
    description: 'Directory to clone the repository into.'
    required: false
    default: "."
  tags:
    description: 'Comma-separate list of tags for built image. Defaults to GlueOps tags'
    required: false
    default: ''
  github_token:
     description: "Personal Access Token (PAT) used to authenticate with the GitHub Container Registry."
     required: false
     default: ${{ github.token }}
  aws_access_key_id:
    description: 'AWS Access Key ID'
    required: false
  aws_secret_access_key:
    description: 'AWS Secret Access Key'
    required: false
  aws_role_to_assume:
    description: 'AWS IAM Role to assume'
    required: false
  aws_default_region:
    description: 'AWS Default Region'
    required: false
    default: "us-west-2"
  aws_cli_version:
    description: 'Version of AWS CLI to use'
    required: false
    default: "2.15.30"
  dockerhub_username:
    description: 'Docker Hub Username'
    required: false
  dockerhub_password:
    description: 'Docker Hub Personal Access Token'
    required: false
  custom_build_args:
    description: 'Path to the file containing custom build arguments'
    required: false
    default: 'custom-args.conf'

runs:
  using: "composite"
  steps:
    - name: Configure for AWS if using ECR
      shell: bash
      if: contains(inputs.registry, '.dkr.ecr.')
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-${{ inputs.aws_cli_version }}.zip" -o "awscliv2.zip"
        unzip -o awscliv2.zip
        sudo ./aws/install --update
        aws --version
        echo "::group::Setting AWS Credentials to Environment Variables"
        if [[ -n "${{ inputs.aws_access_key_id }}" ]]; then
          echo "AWS_ACCESS_KEY_ID=${{ inputs.aws_access_key_id }}" >> $GITHUB_ENV
        fi
        if [[ -n "${{ inputs.aws_secret_access_key }}" ]]; then
          echo "AWS_SECRET_ACCESS_KEY=${{ inputs.aws_secret_access_key }}" >> $GITHUB_ENV
        fi
        if [[ -n "${{ inputs.aws_default_region }}" ]]; then
          echo "AWS_DEFAULT_REGION=${{ inputs.aws_default_region }}" >> $GITHUB_ENV
        fi
        echo "::endgroup::"

    - name: AWS Authentication - IAM Keys
      if: contains(inputs.registry, '.dkr.ecr.') && inputs.aws_access_key_id
      run: aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REGISTRY

    - name: AWS Authentication - IAM Role
      if: contains(inputs.registry, '.dkr.ecr.') && inputs.aws_role_to_assume
      run: |
        echo "Assuming Role: $AWS_ROLE_TO_ASSUME"
        CREDS=$(aws sts assume-role --role-arn $AWS_ROLE_TO_ASSUME --role-session-name build)
        export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
        export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
        export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')
        echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" >> $GITHUB_ENV

    - name: Configure Docker Hub
      shell: bash
      if: contains(inputs.registry, 'docker.io') && inputs.dockerhub_username && inputs.dockerhub_password
      run: echo "${{ inputs.dockerhub_password }}" | docker login -u "${{ inputs.dockerhub_username }}" --password-stdin

    - name: Setup build context
      shell: bash
      run: |
        docker buildx create --use

    - name: Build and Push Docker Image
      shell: bash
      run: |
        echo "::group::Building and Pushing Docker Image"
        docker buildx build \
          --file ${{ inputs.dockerfile }} \
          --tag ${{ inputs.image_name }} \
          --build-arg $(cat ${{ inputs.custom_build_args }}) \
          --context ${{ inputs.context }} \
          --output type=image,push=true,name=${{ inputs.registry }}/${{ inputs.image_name }}:${{ github.sha }} \
          ${{ inputs.context }}
        echo "::endgroup::"
